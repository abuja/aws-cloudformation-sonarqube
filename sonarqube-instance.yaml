---
AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation template to deploy SonarQube Community Edition (single instance)
Metadata: {}
Parameters:
  DBPwd: 
    NoEcho: true
    Description: The master user password for postgres
    Type: String
    AllowedPattern: .+ # not empty
Resources:
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow access to RDS postgres database
        VpcId: vpc-aa794acf
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 # anywhere
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  SonarDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: sonarqube
      VPCSecurityGroups:
      - Ref: PostgresSecurityGroup
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.medium
      Engine: postgres
      MasterUsername: sonarqube
      MasterUserPassword: !Ref DBPwd
      StorageType: gp2 # general ssd
      BackupRetentionPeriod: "0" # disable automated backups when developing the template
    DeletionPolicy: Delete # do not take final snapshot when developing the template
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: All SSH access to Sonar Server
      VpcId: vpc-aa794acf
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 9000 # sonar web traffic
        ToPort: 9000
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  SonarServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages: 
            yum:
              java-1.8.0-openjdk: []
          users:
            sonarqube: # default group with same name will be created
              homeDir: /home/sonarqube
          sources:
            /home/sonarqube: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
          files:
            /home/sonarqube/init.sh:
              content: !Sub |
                # Linux requirements (https://docs.sonarqube.org/latest/requirements/requirements/#header-6)
                sysctl -w vm.max_map_count=262144
                sysctl -w fs.file-max=65536
                sed -i '/^wrapper\.java\.command=.*$/c\wrapper.java.command=java8' /home/sonarqube/sonarqube-7.8/conf/wrapper.conf
            /etc/security/limits.d/99-sonarqube.conf:
              content: !Sub |
                sonarqube   -   nofile   65536
                sonarqube   -   nproc    4096
            /home/sonarqube/sonarqube-7.8/conf/sonar.properties:
              content: !Sub |
                sonar.jdbc.username=sonarqube
                sonar.jdbc.password=mypassword
                sonar.jdbc.url=jdbc:postgresql://${SonarDB.Endpoint.Address}:${SonarDB.Endpoint.Port}/sonarqube
          commands:
            linux-setup:
              command: /bin/bash /home/sonarqube/init.sh
    Properties:
      ImageId: ami-0ff8a91507f77f867 # HVM (SSD) EBS-Backed 64-bit in us-east-1 (N. Virginia)
      InstanceType: m4.large
      KeyName: my-aws-keypair
      SecurityGroupIds:
      - Ref: ServerSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SonarServer --region ${AWS::Region}